import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { Patient } from '../types/patient';

interface PDFGeneratorOptions {
  fromDate: string;
  toDate: string;
  patients: Patient[];
  userName: string;
  logoImage: string | null;
}

export const generatePDF = ({
  fromDate,
  toDate,
  patients,
  userName,
  logoImage
}: PDFGeneratorOptions): void => {
  const doc = new jsPDF();
  
  // Set page dimensions and margins
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  const margin = 10;
  const usableWidth = pageWidth - (2 * margin);

  // Add logo if available
  if (logoImage) {
    try {
      doc.addImage(logoImage, 'PNG', margin, margin, 20, 20);
    } catch (error) {
      console.error('Error adding logo to PDF:', error);
    }
  }

  // Add header
  doc.setFontSize(16);
  doc.setTextColor(44, 62, 80);
  doc.text('Patient Report', pageWidth / 2, 25, { align: 'center' });
  
  // Add report info
  doc.setFontSize(10);
  doc.setTextColor(52, 73, 94);
  doc.text(`Generated by: ${userName}`, pageWidth / 2, 32, { align: 'center' });
  doc.text(`Period: ${fromDate} to ${toDate}`, pageWidth / 2, 38, { align: 'center' });

  // Define column widths as percentages (redistributed after removing Type column)
  const columnWidths = {
    mrn: 0.15,        // 15% - Fixed length number
    name: 0.20,       // 20% - Names can be moderately long
    ageGender: 0.10,  // 10% - Short fixed format
    doctor: 0.15,     // 15% - Doctor names
    specialty: 0.20,  // 20% - Specialty names can be long
    diagnosis: 0.20   // 20% - Diagnosis text with wrapping
  };

  // Define table columns
  const tableColumn = [
    "MRN",
    "Name",
    "Age/Gender",
    "Doctor",
    "Specialty",
    "Diagnosis"
  ];

  // Prepare table rows
  const tableRows = patients.map(patient => [
    patient.mrn,
    patient.patient_name,
    `${patient.age}/${patient.gender}`,
    patient.assigned_doctor,
    patient.specialty,
    patient.diagnosis
  ]);

  // Generate table with improved formatting
  (doc as any).autoTable({
    head: [tableColumn],
    body: tableRows,
    startY: 45,
    theme: 'grid',
    styles: {
      fontSize: 8,
      cellPadding: 2,
      overflow: 'linebreak',
      halign: 'left',
      valign: 'middle',
      lineWidth: 0.1,
      lineColor: [80, 80, 80]
    },
    headStyles: {
      fillColor: [65, 84, 241],
      textColor: 255,
      fontSize: 9,
      fontStyle: 'bold',
      halign: 'center',
      cellPadding: 3
    },
    alternateRowStyles: {
      fillColor: [245, 247, 250]
    },
    margin: { top: 45, left: margin, right: margin },
    columnStyles: {
      0: { // MRN
        cellWidth: usableWidth * columnWidths.mrn,
        halign: 'left',
        overflow: 'visible'
      },
      1: { // Name
        cellWidth: usableWidth * columnWidths.name,
        overflow: 'linebreak'
      },
      2: { // Age/Gender
        cellWidth: usableWidth * columnWidths.ageGender,
        halign: 'center',
        overflow: 'visible'
      },
      3: { // Doctor
        cellWidth: usableWidth * columnWidths.doctor,
        overflow: 'linebreak'
      },
      4: { // Specialty
        cellWidth: usableWidth * columnWidths.specialty,
        overflow: 'linebreak'
      },
      5: { // Diagnosis
        cellWidth: usableWidth * columnWidths.diagnosis,
        overflow: 'linebreak',
        cellPadding: 3
      }
    },
    didDrawPage: (data: any) => {
      // Add page number at the bottom
      doc.setFontSize(8);
      doc.setTextColor(128);
      doc.text(
        `Page ${data.pageCount}`,
        pageWidth - margin - 15,
        pageHeight - margin
      );
    }
  });

  // Save the PDF with formatted filename
  const formattedFromDate = fromDate.replace(/-/g, '');
  const formattedToDate = toDate.replace(/-/g, '');
  doc.save(`patient_report_${formattedFromDate}_${formattedToDate}.pdf`);
};